---
import { Image } from "astro:assets";
import logo from "../assets/logo.svg";
import Search from "astro-pagefind/components/Search";
import { MagnifyingGlassIcon, Bars3Icon, XMarkIcon } from "@heroicons/react/24/outline";
import ThemeToggle from '../components/ThemeToggle.astro';
---

<header class="sticky top-0 z-50 bg-base-100 border-b border-transparent" id="main-header" style="border-bottom-width: 3px; border-bottom-style: solid; border-bottom-color: transparent; transition: border-bottom-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 300ms, opacity 300ms, box-shadow 300ms;">
  <!-- Mobile nav (toggle global drawer) -->
  <nav class="navbar lg:hidden bg-base-100 w-full px-2">
    <div class="flex-none">
      <label for="nav-drawer" aria-label="Open sidebar" class="btn btn-ghost btn-square drawer-button">
        <Bars3Icon className="h-5 w-5" />
      </label>
    </div>
    <!-- Logo centered -->
    <a href="/" class="absolute left-1/2 -translate-x-1/2 flex items-center">
      <Image src={logo} alt="Matt Nolan's logo" class="h-18 w-auto" />
    </a>
    <div class="flex-none ml-auto">
      <button aria-label="Open search" class="btn btn-ghost btn-square" onclick="search_modal.showModal()">
        <MagnifyingGlassIcon className="h-5 w-5" />
      </button>
      <ThemeToggle />
    </div>
  </nav>

  <!-- ********** Desktop (â‰¥ lg): standard navbar ********** -->
  <nav
    class="navbar hidden lg:flex w-full bg-base-100 px-4"
    style="--navbar-padding:0;"
  >
    <div class="navbar-start">
      <a href="/" class="flex items-center gap-2">
        <Image src={logo} alt="Matt Nolan's logo" class="h-18 w-auto" />
        <span class="text-xl font-bold whitespace-nowrap">Matt Nolan's Portfolio</span>
      </a>
    </div>
    
    <div class="navbar-end flex-1 flex justify-end items-center gap-4">
      <ul class="menu menu-horizontal gap-x-3 flex-nowrap">
        <li>
          <a href="/about" class="normal-case font-bold text-lg whitespace-nowrap">About</a>
        </li>
        <li>
          <a href="/projects" class="normal-case font-bold text-lg whitespace-nowrap">Projects</a>
        </li>
        <li>
          <a href="/posts" class="normal-case font-bold text-lg whitespace-nowrap">Posts</a>
        </li>
        <li>
          <a href="/tags" class="normal-case font-bold text-lg whitespace-nowrap">Tags</a>
        </li>
      </ul>
      
      <Search
        id="search"
        className="pagefind-ui"
        uiOptions={{ showImages: false }}
      />    
      <ThemeToggle />
    </div>
  </nav>
</header>

<!-- Search modal for mobile -->
<dialog id="search_modal" class="modal lg:hidden">
  <div
    class="modal-box w-11/12 max-w-2xl h-[90vh] overflow-y-auto flex flex-col relative"
  >
    <form method="dialog">
      <button
        class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        aria-label="Close search"
      >
        <XMarkIcon className="h-5 w-5" />
      </button>
    </form>
    <div class="relative">
      <Search
        id="mobile-search"
        className="pagefind-ui w-full mt-8 mb-2"
        uiOptions={{ showImages: false }}
      />
    </div>
  </div>
</dialog>

<script>
  // Initialize border immediately to prevent any jumps
  function initializeBorder() {
    const header = document.getElementById('main-header');
    if (!header) return false;
    
    // Set border immediately with JavaScript control
    header.style.setProperty('border-bottom-width', '3px', 'important');
    header.style.setProperty('border-bottom-style', 'solid', 'important');
    header.style.setProperty('border-bottom-color', 'transparent', 'important');
    return true;
  }

  // Try to initialize immediately, then retry if needed
  if (!initializeBorder()) {
    // If header not found, try when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeBorder);
    } else {
      // DOM is already ready, try again
      initializeBorder();
    }
  }

  // Function to apply header styling based on scroll position
  function applyHeaderStyling(scrollY: number) {
    const header = document.getElementById('main-header');
    if (!header) return;
    
    const threshold = 20; // Lower threshold for smoother start
    const fullThreshold = 60; // Full effect threshold

    if (scrollY > threshold) {
      // Calculate opacity based on scroll progress
      const progress = Math.min((scrollY - threshold) / (fullThreshold - threshold), 1);
      
      // Scrolled down - add enhanced separation and directly modify background
      header.classList.add(
        'shadow-2xl', 
        'backdrop-blur-lg', 
        'header-scrolled'
      );
      
      // Always use 3px border, only change color
      if (scrollY > fullThreshold) {
        if (document.documentElement.getAttribute('data-theme') === 'business') {
          header.style.setProperty('border-bottom-color', 'rgba(147, 197, 253, 0.4)', 'important');
        } else {
          header.style.setProperty('border-bottom-color', 'rgba(30, 41, 59, 0.7)', 'important');
        }
      } 
      
      // Directly set background color via style for immediate effect
      if (document.documentElement.getAttribute('data-theme') === 'business') {
        header.style.backgroundColor = `rgba(100, 116, 139, ${0.9 + 0.08 * progress})`;
      } else {
        header.style.backgroundColor = `rgba(255, 255, 255, ${0.9 + 0.08 * progress})`;
      }
    } else {
      // At top - remove enhanced separation and reset background
      header.classList.remove(
        'shadow-2xl', 
        'backdrop-blur-lg', 
        'border-b-2', 
        'border-primary/30',
        'header-scrolled'
      );
      
      // Reset to default background and border
      header.style.backgroundColor = '';
      header.style.setProperty('border-bottom-color', 'transparent', 'important');
    }
  }

  // Add scroll-based styling to header with smooth transitions
  function updateHeaderOnScroll() {
    const header = document.getElementById('main-header');
    if (!header) return;

    // Check if drawer is open - if so, don't modify header styling
    const drawerToggle = document.getElementById('nav-drawer') as HTMLInputElement;
    if (drawerToggle && drawerToggle.checked) {
      return; // Skip header updates when drawer is open
    }

    const scrollY = window.scrollY;
    applyHeaderStyling(scrollY);
  }
  
  // Listen for scroll events with throttling for smoother performance
  let ticking = false;
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(updateHeaderOnScroll);
      ticking = true;
    }
  }
  
  function handleScroll() {
    ticking = false;
    requestTick();
  }
  
  window.addEventListener('scroll', handleScroll);
  
  // Enhanced window resize handling with smooth content transitions
  let resizeTimeout: number;
  let isResizing = false;
  
  function handleResizeStart() {
    if (!isResizing) {
      isResizing = true;
      document.body.classList.add('window-resizing');
    }
    
    clearTimeout(resizeTimeout);
    resizeTimeout = window.setTimeout(() => {
      isResizing = false;
      document.body.classList.remove('window-resizing');
    }, 800);
  }
  
  window.addEventListener('resize', handleResizeStart);
  
  // Also add orientationchange for mobile devices
  window.addEventListener('orientationchange', handleResizeStart);
  
  // Check initial state
  // Border should already be initialized, just need to set correct color based on scroll position
  document.addEventListener('DOMContentLoaded', () => {
    updateHeaderOnScroll();
    void document.body.offsetHeight; // Force reflow
    requestAnimationFrame(() => {
      updateHeaderOnScroll();
    });
  });
  
  // Listen for theme changes
  const observer = new MutationObserver(updateHeaderOnScroll);
  observer.observe(document.documentElement, { 
    attributes: true, 
    attributeFilter: ['data-theme'] 
  });

  // Fix mobile menu functionality - optimized approach with header management
  document.addEventListener('DOMContentLoaded', () => {
    const drawerToggle = document.getElementById('nav-drawer') as HTMLInputElement;
    const drawerLinks = document.querySelectorAll('.drawer-side a');
    const header = document.getElementById('main-header');
    
    if (drawerToggle && header) {
      // Listen for drawer state changes
      drawerToggle.addEventListener('change', () => {
        if (drawerToggle.checked) {
          // Drawer opening - switch to fixed positioning to prevent header jump
          const headerHeight = header.offsetHeight;
          
          // Preserve current border and background styling
          const currentBorderWidth = header.style.borderBottomWidth || '3px';
          const currentBorderStyle = header.style.borderBottomStyle || 'solid';
          const currentBorderColor = header.style.borderBottomColor || 'transparent';
          const currentBgColor = header.style.backgroundColor || '';
          const hasScrolledClass = header.classList.contains('header-scrolled');
          
          header.style.cssText = `
            position: fixed !important;
            top: 0px !important;
            left: 0px !important;
            right: 0px !important;
            width: 100% !important;
            z-index: 40 !important;
            transform: translateY(0) !important;
            opacity: 1 !important;
            visibility: visible !important;
            border-bottom-width: ${currentBorderWidth} !important;
            border-bottom-style: ${currentBorderStyle} !important;
            border-bottom-color: ${currentBorderColor} !important;
            background-color: ${currentBgColor} !important;
          `;
          
          // Re-apply classes that might have been lost
          if (hasScrolledClass) {
            header.classList.add('header-scrolled');
          }
          
          // Prevent content shift
          document.body.style.paddingTop = `${headerHeight}px`;
        } else {
          // Drawer closing - restore original positioning while preserving styling
          
          // Store current border and background before reset
          const currentBorderWidth = header.style.borderBottomWidth;
          const currentBorderStyle = header.style.borderBottomStyle; 
          const currentBorderColor = header.style.borderBottomColor;
          const currentBgColor = header.style.backgroundColor;
          const hasScrolledClass = header.classList.contains('header-scrolled');
          
          // Reset positioning styles only
          header.style.position = '';
          header.style.top = '';
          header.style.left = '';
          header.style.right = '';
          header.style.width = '';
          header.style.zIndex = '';
          header.style.transform = '';
          header.style.opacity = '';
          header.style.visibility = '';
          
          // Restore border and background immediately
          if (currentBorderWidth) header.style.borderBottomWidth = currentBorderWidth;
          if (currentBorderStyle) header.style.borderBottomStyle = currentBorderStyle;
          if (currentBorderColor) header.style.borderBottomColor = currentBorderColor;
          if (currentBgColor) header.style.backgroundColor = currentBgColor;
          
          // Restore classes
          if (hasScrolledClass) {
            header.classList.add('header-scrolled');
          }
          
          document.body.style.paddingTop = '';
          
          // Restore scroll-based behavior after animation
          setTimeout(updateHeaderOnScroll, 150);
        }
      });
    }
    
    // Close drawer when clicking menu links
    drawerLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (drawerToggle) {
          drawerToggle.checked = false;
        }
      });
    });
  });
</script>

<style>
  /* Enhanced header separation with improved shadow and brightened background */
  .header-scrolled {
    /* Clean shadow for light mode - no blue accents */
    box-shadow: 
      0 4px 12px -2px rgba(0, 0, 0, 0.15),
      0 2px 4px -1px rgba(0, 0, 0, 0.1);
  }
  
  /* Light mode (corporate theme) - much brighter white background */
  [data-theme="corporate"] .header-scrolled {
    background-color: rgba(255, 255, 255, 0.98) !important; /* Pure white */
    border-bottom-width: 3px !important;
    border-bottom-style: solid !important;
    border-bottom-color: rgba(30, 41, 59, 0.7) !important; /* Thinner, darker border */
  }
  
  /* Dark mode (business theme) - much brighter background with blue accents */
  [data-theme="business"] .header-scrolled {
    background-color: rgba(100, 116, 139, 0.98) !important; /* Much lighter slate */
    box-shadow: 
      0 4px 12px -2px rgba(0, 0, 0, 0.3),
      0 2px 4px -1px rgba(0, 0, 0, 0.2),
      0 0 0 1px rgba(147, 197, 253, 0.15);
    border-bottom-width: 3px !important;
    border-bottom-style: solid !important;
    border-bottom-color: rgba(147, 197, 253, 0.4) !important;
  }

  /* Ensure search bar has minimum width and doesn't shrink */
  .pagefind-ui {
    min-width: 300px !important;
    width: 300px !important;
    flex-shrink: 0 !important;
  }
  
  .pagefind-ui input {
    min-width: 300px !important;
    width: 300px !important;
  }

  /* Better spacing for navbar items */
  .navbar-end > .menu {
    margin-right: 1rem;
  }

  /* Prevent text color transitions in header and all descendants, but allow border-bottom-color transition on #main-header */
  #main-header {
    transition-property: border-bottom-color, transform, opacity, box-shadow !important;
  }
  #main-header * {
    transition-property: none !important;
  }
</style>