---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import { formatProjectDate, calculateDuration } from '../../utils/dateUtils';
import { getRelatedContent } from '../../utils/tagUtils';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

type Props = {
  project: CollectionEntry<'projects'>;
};

const { project } = Astro.props;
const { Content } = await project.render();

// Get related content based on shared tags
const relatedContent = await getRelatedContent(project.data.tags, project.slug, 3);
---

<Layout 
  seo={{
    title: project.data.title,
    description: project.data.description
  }}
>
  <article class="container mx-auto px-4 py-8">
    <!-- Project Header -->
    <header class="mb-8">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Project Image -->
        <div class="lg:w-1/2">
          <Image 
            src={project.data.cover}
            alt={project.data.title}
            width={600}
            height={400}
            class="w-full h-auto rounded-lg shadow-lg"
          />
        </div>
        
        <!-- Project Info -->
        <div class="lg:w-1/2">
          <h1 class="text-4xl font-bold mb-4">{project.data.title}</h1>
          <p class="text-lg text-base-content/70 mb-6">{project.data.description}</p>
          
          <!-- Status Badge -->
          <div class="mb-4">
            <div class={`badge badge-lg ${
              project.data.status === 'completed' ? 'badge-success' : 
              project.data.status === 'in-progress' ? 'badge-warning' : 
              'badge-info'
            }`}>
              {project.data.status.replace('-', ' ').toUpperCase()}
            </div>
          </div>
          
          <!-- Tags -->
          {project.data.tags.length > 0 && (
            <div class="mb-6">
              <h3 class="text-sm font-semibold mb-2">Tags</h3>
              <div class="flex flex-wrap gap-2">
                {project.data.tags.map(tag => (
                  <a href={`/tags/${tag}/`} class="badge badge-outline hover:badge-primary transition-colors">
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          )}
          
          <!-- Action Links -->
          <div class="flex flex-wrap gap-3">
            {project.data.githubUrl && (
              <a 
                href={project.data.githubUrl} 
                class="btn btn-outline"
                target="_blank"
                rel="noopener noreferrer"
              >
                View on GitHub
              </a>
            )}
            {project.data.liveUrl && (
              <a 
                href={project.data.liveUrl} 
                class="btn btn-primary"
                target="_blank"
                rel="noopener noreferrer"
              >
                Live Demo
              </a>
            )}
          </div>
          
          <!-- Project Dates -->
          <div class="mt-6 text-sm text-base-content/60">
            {project.data.status === 'completed' && project.data.endDate ? (
              <div>
                <div>Started: {formatProjectDate(project.data.startDate)}</div>
                <div>Completed: {formatProjectDate(project.data.endDate)}</div>
                <div class="mt-1 font-medium">
                  Duration: {calculateDuration(project.data.startDate, project.data.endDate)}
                </div>
              </div>
            ) : project.data.status === 'in-progress' ? (
              <div>
                <div>Started: {formatProjectDate(project.data.startDate)}</div>
                <div class="mt-1 font-medium text-warning">In Progress</div>
              </div>
            ) : (
              <div>
                <div>Planned Start: {formatProjectDate(project.data.startDate)}</div>
                <div class="mt-1 font-medium text-info">Planned</div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
    
    <!-- Project Content -->
    <div class="prose prose-lg max-w-none">
      <Content />
    </div>
    
    <!-- Project Versions -->
    {project.data.versions && project.data.versions.length > 0 && (
      <div class="mt-12">
        <h2 class="text-3xl font-bold mb-8">Project Versions</h2>
        
        <!-- Version Selector -->
        <div class="mb-6">
          <div class="tabs tabs-boxed w-fit">
            {project.data.versions.slice().reverse().map((version, index) => (
              <button 
                class={`tab ${index === 0 ? 'tab-active' : ''}`}
                onclick={`showVersion(${index})`}
                id={`version-tab-${index}`}
              >
                {version.version}
              </button>
            ))}
          </div>
        </div>
        
        <!-- Version Content -->
        <div class="relative">
          {project.data.versions.slice().reverse().map((version, index) => (
            <div 
              class={`version-content ${index === 0 ? 'block' : 'hidden'}`}
              id={`version-${index}`}
            >
              <div class="card bg-base-100 shadow-lg">
                <div class="card-body p-6">
                  <div class="flex flex-col lg:flex-row gap-6">
                    <!-- Version Images -->
                    {version.images && version.images.length > 0 && (
                      <div class="lg:w-1/3">
                        <div class="grid grid-cols-1 gap-3">
                          {version.images.slice(0, 3).map((img, imgIndex) => (
                            <Image 
                              src={img}
                              alt={`${version.title} - Image ${imgIndex + 1}`}
                              width={300}
                              height={200}
                              class="w-full h-32 object-cover rounded-lg"
                            />
                          ))}
                          {version.images.length > 3 && (
                            <div class="text-sm text-base-content/60 text-center">
                              +{version.images.length - 3} more images
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                    
                    <!-- Version Info -->
                    <div class={version.images && version.images.length > 0 ? "lg:w-2/3" : "w-full"}>
                      <div class="flex items-center gap-3 mb-3">
                        <h3 class="text-2xl font-bold">{version.version}</h3>
                        <div class={`badge ${
                          version.status === 'completed' ? 'badge-success' : 
                          version.status === 'in-progress' ? 'badge-warning' : 
                          'badge-info'
                        }`}>
                          {version.status.replace('-', ' ')}
                        </div>
                      </div>
                      
                      <h4 class="text-xl font-semibold mb-3">{version.title}</h4>
                      <p class="text-base-content/80 mb-4">{version.description}</p>
                      
                      <!-- Version Tags -->
                      {version.tags && version.tags.length > 0 && (
                        <div class="mb-4">
                          <h5 class="text-sm font-semibold mb-2">Tags</h5>
                          <div class="flex flex-wrap gap-2">
                            {version.tags.map(tag => (
                              <span class="badge badge-outline badge-sm">{tag}</span>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      <!-- Achievements -->
                      {version.achievements && version.achievements.length > 0 && (
                        <div class="mb-4">
                          <h5 class="text-sm font-semibold mb-2">Key Achievements</h5>
                          <ul class="list-disc list-inside text-sm space-y-1">
                            {version.achievements.map(achievement => (
                              <li>{achievement}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      <!-- Learnings -->
                      {version.learnings && version.learnings.length > 0 && (
                        <div class="mb-4">
                          <h5 class="text-sm font-semibold mb-2">Key Learnings</h5>
                          <ul class="list-disc list-inside text-sm space-y-1">
                            {version.learnings.map(learning => (
                              <li>{learning}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      <!-- Version Links and Timeline -->
                      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mt-4">
                        <div class="text-sm text-base-content/60">
                          {version.status === 'completed' && version.endDate ? (
                            <div>
                              <div>Started: {formatProjectDate(version.startDate)}</div>
                              <div>Completed: {formatProjectDate(version.endDate)}</div>
                              <div class="font-medium">
                                Duration: {calculateDuration(version.startDate, version.endDate)}
                              </div>
                            </div>
                          ) : version.status === 'in-progress' ? (
                            <div>
                              <div>Started: {formatProjectDate(version.startDate)}</div>
                              <div class="font-medium text-warning">In Progress</div>
                            </div>
                          ) : (
                            <div>
                              <div>Planned: {formatProjectDate(version.startDate)}</div>
                            </div>
                          )}
                        </div>
                        
                        <!-- Version Links -->
                        <div class="flex gap-2">
                          {version.githubUrl && (
                            <a 
                              href={version.githubUrl} 
                              class="btn btn-sm btn-outline"
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              GitHub
                            </a>
                          )}
                          {version.liveUrl && (
                            <a 
                              href={version.liveUrl} 
                              class="btn btn-sm btn-primary"
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              Demo
                            </a>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    <script is:inline>
      function showVersion(selectedIndex) {
        // Hide all version content
        document.querySelectorAll('.version-content').forEach(content => {
          content.classList.add('hidden');
          content.classList.remove('block');
        });
        
        // Remove active state from all tabs
        document.querySelectorAll('[id^="version-tab-"]').forEach(tab => {
          tab.classList.remove('tab-active');
        });
        
        // Show selected version
        const selectedContent = document.getElementById(`version-${selectedIndex}`);
        const selectedTab = document.getElementById(`version-tab-${selectedIndex}`);
        
        if (selectedContent) {
          selectedContent.classList.remove('hidden');
          selectedContent.classList.add('block');
        }
        
        if (selectedTab) {
          selectedTab.classList.add('tab-active');
        }
      }
    </script>
    
    <!-- Navigation -->
    <div class="mt-12 pt-8 border-t border-base-300">
      <a href="/projects" class="btn btn-outline">
        ← Back to Projects
      </a>
    </div>

    <!-- Related Content -->
    {relatedContent.length > 0 && (
      <div class="mt-12 pt-8 border-t border-base-300">
        <h2 class="text-2xl font-bold mb-6">Related Content</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {relatedContent.map(item => (
            <article class="card bg-base-100 shadow hover:shadow-lg transition-shadow duration-200">
              <figure>
                <Image 
                  src={item.data.cover}
                  alt={item.data.title}
                  width={300}
                  height={200}
                  class="w-full h-32 object-cover"
                />
              </figure>
              <div class="card-body p-4">
                <div class="flex items-center gap-2 mb-2">
                  <div class={`badge badge-sm ${
                    item.type === 'project' ? 'badge-primary' : 'badge-secondary'
                  }`}>
                    {item.type}
                  </div>
                  <div class="text-xs text-base-content/60">
                    {item.sharedTags.length} shared tag{item.sharedTags.length !== 1 ? 's' : ''}
                  </div>
                </div>
                <h3 class="card-title text-base">
                  <a 
                    href={`/${item.type === 'project' ? 'projects' : 'posts'}/${item.slug}/`}
                    class="hover:text-primary transition-colors"
                  >
                    {item.data.title}
                  </a>
                </h3>
                <div class="flex flex-wrap gap-1 mt-2">
                  {item.sharedTags.map(tag => (
                    <span class="badge badge-outline badge-xs">{tag}</span>
                  ))}
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    )}
  </article>
</Layout>
