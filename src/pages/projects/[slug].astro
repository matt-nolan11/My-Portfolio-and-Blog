---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import { formatProjectDate, calculateDuration } from '../../utils/dateUtils';
import { getRelatedContent } from '../../utils/tagUtils';
import { marked } from 'marked';
import ProjectGallery from '../../components/ProjectGallery';
import ModularSection from '../../components/ModularSection.astro';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

type Props = {
  project: CollectionEntry<'projects'>;
};

const { project } = Astro.props;
const { Content } = await project.render();

// Get related content based on shared tags
const relatedContent = await getRelatedContent(project.data.tags, project.slug, 3);
---

<Layout 
  seo={{
    title: project.data.title,
    description: project.data.description
  }}
>
  <article class="max-w-7xl mx-auto px-4 py-8">
    <!-- Project Header -->
    <header class="mb-8">
      <div class="flex flex-col lg:flex-row gap-8">
        <!-- Project Image/Gallery -->
        <div class="lg:w-1/2">
          {project.data.gallery && project.data.gallery.length > 0 ? (
            <ProjectGallery 
              images={project.data.gallery}
              autoplay={project.data.gallery.length > 1}
              autoplayInterval={4000}
              showThumbnails={true}
              showIndicators={true}
              size="medium"
              client:load
            />
          ) : (
            <Image 
              src={project.data.cover}
              alt={project.data.title}
              width={600}
              height={400}
              class="w-full h-auto rounded-lg shadow-lg"
            />
          )}
        </div>
        
        <!-- Project Info -->
        <div class="lg:w-1/2">
          <h1 class="text-4xl font-bold mb-4">{project.data.title}</h1>
          <p class="text-lg text-base-content/70 mb-6">{project.data.description}</p>
          
          <!-- Status Badge -->
          <div class="mb-4">
            <div class={`badge badge-lg ${
              project.data.status === 'completed' ? 'badge-success' : 
              project.data.status === 'in-progress' ? 'badge-warning' : 
              'badge-info'
            }`}>
              {project.data.status.replace('-', ' ').toUpperCase()}
            </div>
          </div>
          
          <!-- Tags -->
          {project.data.tags.length > 0 && (
            <div class="mb-6">
              <h3 class="text-sm font-semibold mb-2">Tags</h3>
              <div class="flex flex-wrap gap-2">
                {project.data.tags.map(tag => (
                  <a href={`/tags/${tag}/`} class="badge badge-outline tag-hover-light-blue transition-colors">
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          )}
          
          <!-- Action Links -->
          <div class="flex flex-wrap gap-3">
            {project.data.githubUrl && (
              <a 
                href={project.data.githubUrl} 
                class="btn btn-outline"
                target="_blank"
                rel="noopener noreferrer"
              >
                View on GitHub
              </a>
            )}
            {project.data.liveUrl && (
              <a 
                href={project.data.liveUrl} 
                class="btn btn-primary"
                target="_blank"
                rel="noopener noreferrer"
              >
                Live Demo
              </a>
            )}
          </div>
          
          <!-- Project Dates -->
          <div class="mt-6 text-sm text-base-content/60">
            {project.data.status === 'completed' && project.data.endDate ? (
              <div>
                <div>Started: {formatProjectDate(project.data.startDate)}</div>
                <div>Completed: {formatProjectDate(project.data.endDate)}</div>
                <div class="mt-1 font-medium">
                  Duration: {calculateDuration(project.data.startDate, project.data.endDate)}
                </div>
              </div>
            ) : project.data.status === 'in-progress' ? (
              <div>
                <div>Started: {formatProjectDate(project.data.startDate)}</div>
                <div class="mt-1 font-medium text-warning">In Progress</div>
              </div>
            ) : (
              <div>
                <div>Planned Start: {formatProjectDate(project.data.startDate)}</div>
                <div class="mt-1 font-medium text-info">Planned</div>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
    
    <!-- Project Content -->
    <div class="prose prose-lg max-w-none">
      <Content />
    </div>

    <!-- Modular Project Sections -->
    {project.data.sections && project.data.sections.length > 0 && (
      <div class="mt-12">
        <ModularSection sections={project.data.sections} />
      </div>
    )}

    <!-- Project Versions -->
    {project.data.versions && project.data.versions.length > 0 && (
      <div class="mt-12">
        {/* Only show header if versionsTitle is not explicitly set to empty string */}
        {project.data.versionsTitle !== "" && (
          <h2 class="text-3xl font-bold mb-8">
            {project.data.versionsTitle || "Project Versions"}
          </h2>
        )}
        
        <!-- Version Selector -->
        <div class="mb-6">
          <div class="tabs tabs-boxed w-fit bg-base-200/50">
            {project.data.versions.slice().reverse().map((version, index) => (
              <button 
                class={`tab transition-all duration-200 ${index === 0 ? 'tab-active' : ''} hover:bg-primary/10`}
                onclick={`window.showVersion(${index})`}
                id={`version-tab-${index}`}
              >
                {version.version}
              </button>
            ))}
          </div>
        </div>
        
        <!-- Version Content -->
        <div class="relative">
          {project.data.versions.slice().reverse().map((version, index) => (
            <div 
              class={`version-content transition-all duration-300 ${index === 0 ? 'block' : 'hidden'}`}
              id={`version-${index}`}
            >
              <div class="version-card">
                {(version.gallery && version.gallery.length > 0) || (version.images && version.images.length > 0) ? (
                  /* 2-Column Layout: Version Info + Gallery/Images */
                  <div class="flex flex-col lg:flex-row gap-8 mb-8">
                    {/* Version Info Column */}
                    <div class="lg:w-1/2">
                      {/* Version Header */}
                      <div class="flex items-center gap-3 mb-4">
                        <h3 class="text-2xl font-bold">{version.version}</h3>
                        <div class={`badge ${
                          version.status === 'completed' ? 'badge-success' : 
                          version.status === 'in-progress' ? 'badge-warning' : 
                          'badge-info'
                        }`}>
                          {version.status.replace('-', ' ')}
                        </div>
                      </div>
                      
                      <h4 class="text-xl font-semibold mb-3">{version.title}</h4>
                      <p class="text-base-content/80 mb-6">{version.description}</p>

                      {/* Timeline and Links */}
                      <div class="mb-6">
                        <div class="text-sm text-base-content/60 mb-3">
                          {version.status === 'completed' && version.endDate ? (
                            <div>
                              <div>Started: {formatProjectDate(version.startDate)}</div>
                              <div>Completed: {formatProjectDate(version.endDate)}</div>
                              <div class="font-medium">
                                Duration: {calculateDuration(version.startDate, version.endDate)}
                              </div>
                            </div>
                          ) : version.status === 'in-progress' ? (
                            <div>
                              <div>Started: {formatProjectDate(version.startDate)}</div>
                              <div class="font-medium text-warning">In Progress</div>
                            </div>
                          ) : (
                            <div>
                              <div>Planned: {formatProjectDate(version.startDate)}</div>
                            </div>
                          )}
                        </div>
                        
                        {/* Links */}
                        <div class="flex gap-2">
                          {version.githubUrl && (
                            <a 
                              href={version.githubUrl} 
                              class="btn btn-sm btn-outline"
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              GitHub
                            </a>
                          )}
                          {version.liveUrl && (
                            <a 
                              href={version.liveUrl} 
                              class="btn btn-sm btn-primary"
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              Demo
                            </a>
                          )}
                        </div>
                      </div>

                      {/* Achievements and Learnings */}
                      {(version.achievements?.length || version.learnings?.length) && (
                        <div class="space-y-4">
                          {version.achievements && version.achievements.length > 0 && (
                            <div>
                              <h5 class="text-sm font-semibold mb-2">Key Achievements</h5>
                              <ul class="list-disc list-inside text-sm space-y-1">
                                {version.achievements.map(achievement => (
                                  <li>{achievement}</li>
                                ))}
                              </ul>
                            </div>
                          )}
                          
                          {version.learnings && version.learnings.length > 0 && (
                            <div>
                              <h5 class="text-sm font-semibold mb-2">Key Learnings</h5>
                              <ul class="list-disc list-inside text-sm space-y-1">
                                {version.learnings.map(learning => (
                                  <li>{learning}</li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Gallery/Images Column */}
                    <div class="lg:w-1/2">
                      {version.gallery && version.gallery.length > 0 ? (
                        <ProjectGallery 
                          images={version.gallery}
                          autoplay={version.galleryOptions?.autoplay !== undefined ? version.galleryOptions.autoplay : version.gallery.length > 1}
                          autoplayInterval={version.galleryOptions?.autoplayInterval || 5000}
                          showThumbnails={version.galleryOptions?.showThumbnails !== undefined ? version.galleryOptions.showThumbnails : version.gallery.length > 2}
                          showIndicators={version.galleryOptions?.showIndicators !== false}
                          size={version.galleryOptions?.size || 'medium'}
                          client:load
                        />
                      ) : version.images && version.images.length > 0 && (
                        <div class="grid grid-cols-1 gap-4">
                          {version.images.map((img, imgIndex) => (
                            <Image 
                              src={img}
                              alt={`${version.title} - Image ${imgIndex + 1}`}
                              width={400}
                              height={300}
                              class="w-full h-auto object-cover rounded-lg shadow"
                            />
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  /* Single Column Layout: No Images */
                  <div class="mb-8">
                    {/* Version Header */}
                    <div class="flex items-center gap-3 mb-4">
                      <h3 class="text-2xl font-bold">{version.version}</h3>
                      <div class={`badge ${
                        version.status === 'completed' ? 'badge-success' : 
                        version.status === 'in-progress' ? 'badge-warning' : 
                        'badge-info'
                      }`}>
                        {version.status.replace('-', ' ')}
                      </div>
                    </div>
                    
                    <h4 class="text-xl font-semibold mb-3">{version.title}</h4>
                    <p class="text-base-content/80 mb-6">{version.description}</p>

                    {/* Timeline and Links */}
                    <div class="mb-6">
                      <div class="text-sm text-base-content/60 mb-3">
                        {version.status === 'completed' && version.endDate ? (
                          <div>
                            <div>Started: {formatProjectDate(version.startDate)}</div>
                            <div>Completed: {formatProjectDate(version.endDate)}</div>
                            <div class="font-medium">
                              Duration: {calculateDuration(version.startDate, version.endDate)}
                            </div>
                          </div>
                        ) : version.status === 'in-progress' ? (
                          <div>
                            <div>Started: {formatProjectDate(version.startDate)}</div>
                            <div class="font-medium text-warning">In Progress</div>
                          </div>
                        ) : (
                          <div>
                            <div>Planned: {formatProjectDate(version.startDate)}</div>
                          </div>
                        )}
                      </div>
                      
                      {/* Links */}
                      <div class="flex gap-2">
                        {version.githubUrl && (
                          <a 
                            href={version.githubUrl} 
                            class="btn btn-sm btn-outline"
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            GitHub
                          </a>
                        )}
                        {version.liveUrl && (
                          <a 
                            href={version.liveUrl} 
                            class="btn btn-sm btn-primary"
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            Demo
                          </a>
                        )}
                      </div>
                    </div>

                    {/* Achievements and Learnings Row */}
                    {(version.achievements?.length || version.learnings?.length) && (
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {version.achievements && version.achievements.length > 0 && (
                          <div>
                            <h5 class="text-sm font-semibold mb-2">Key Achievements</h5>
                            <ul class="list-disc list-inside text-sm space-y-1">
                              {version.achievements.map(achievement => (
                                <li>{achievement}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                        
                        {version.learnings && version.learnings.length > 0 && (
                          <div>
                            <h5 class="text-sm font-semibold mb-2">Key Learnings</h5>
                            <ul class="list-disc list-inside text-sm space-y-1">
                              {version.learnings.map(learning => (
                                <li>{learning}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}

                {/* Modular Sections */}
                {version.sections && version.sections.length > 0 && (
                  <div class="space-y-8">
                    <ModularSection sections={version.sections} />
                  </div>
                )}

                {/* Legacy Content Support */}
                {version.content && !version.sections && (
                  <div class="prose prose-lg max-w-none" set:html={marked(version.content)} />
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    <style>
      .version-content {
        transition: opacity 0.4s ease-in-out !important;
      }
    </style>

    <script is:inline>
      window.showVersion = function(selectedIndex) {
        // Get all version content elements
        const allVersions = document.querySelectorAll('.version-content');
        const selectedContent = document.getElementById(`version-${selectedIndex}`);
        const selectedTab = document.getElementById(`version-tab-${selectedIndex}`);
        
        // Skip if already active
        if (selectedContent && selectedContent.style.opacity === '1' && !selectedContent.classList.contains('hidden')) {
          return;
        }
        
        // Disable transitions temporarily to set initial states
        allVersions.forEach(content => {
          content.style.transition = 'none';
        });
        
        // Set all content to be block but invisible, then re-enable transitions
        allVersions.forEach(content => {
          content.classList.remove('hidden');
          content.classList.add('block');
          content.style.opacity = content === selectedContent ? '0' : '0';
        });
        
        // Force reflow and re-enable transitions
        selectedContent?.offsetHeight;
        
        setTimeout(() => {
          allVersions.forEach(content => {
            content.style.transition = 'opacity 0.4s ease-in-out';
          });
          
          // Start the fade sequence
          const currentlyVisible = Array.from(allVersions).find(content => 
            content.style.opacity === '1' || (content.style.opacity === '' && !content.classList.contains('hidden'))
          );
          
          if (currentlyVisible && currentlyVisible !== selectedContent) {
            // Fade out current content
            currentlyVisible.style.opacity = '0';
            
            // After fade out, hide it and show new content
            setTimeout(() => {
              currentlyVisible.classList.add('hidden');
              currentlyVisible.classList.remove('block');
              
              if (selectedContent) {
                selectedContent.classList.remove('hidden');
                selectedContent.classList.add('block');
                selectedContent.style.opacity = '0';
                
                // Fade in new content
                setTimeout(() => {
                  selectedContent.style.opacity = '1';
                }, 50);
              }
            }, 400);
          } else {
            // No current content or same content, just show selected
            if (selectedContent) {
              allVersions.forEach(content => {
                if (content !== selectedContent) {
                  content.classList.add('hidden');
                  content.classList.remove('block');
                  content.style.opacity = '0';
                }
              });
              
              selectedContent.classList.remove('hidden');
              selectedContent.classList.add('block');
              selectedContent.style.opacity = '1';
            }
          }
          
          // Update tab styling
          document.querySelectorAll('[id^="version-tab-"]').forEach(tab => {
            tab.classList.remove('tab-active');
            tab.style.backgroundColor = '';
            tab.style.color = '';
            tab.style.border = '';
            tab.style.fontWeight = '';
          });
          
          if (selectedTab) {
            selectedTab.classList.add('tab-active');
            selectedTab.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
            selectedTab.style.color = 'rgba(59, 130, 246, 1)';
            selectedTab.style.border = '1px solid rgba(59, 130, 246, 0.4)';
            selectedTab.style.fontWeight = '600';
          }
          
          // Dispatch custom event
          setTimeout(() => {
            if (selectedContent) {
              const event = new CustomEvent('versionTabChanged', { 
                detail: { selectedIndex } 
              });
              selectedContent.dispatchEvent(event);
              window.dispatchEvent(event);
            }
          }, 450);
        }, 50);
      };
      
      // Initialize active styling and transitions
      function initializeVersionTabs() {
        const firstTab = document.querySelector('#version-tab-0');
        const firstContent = document.querySelector('#version-0');
        
        // Initialize first tab styling
        if (firstTab) {
          firstTab.classList.add('tab-active');
          firstTab.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
          firstTab.style.color = 'rgba(59, 130, 246, 1)';
          firstTab.style.border = '1px solid rgba(59, 130, 246, 0.4)';
          firstTab.style.fontWeight = '600';
        }
        
        // Set up all version content
        document.querySelectorAll('.version-content').forEach((content, index) => {
          // Only apply transition to version content elements, not globally
          content.style.transition = 'opacity 0.4s ease-in-out';
          content.style.position = 'relative'; // Ensure proper positioning context
          if (content === firstContent) {
            content.style.opacity = '1';
            content.classList.remove('hidden');
            content.classList.add('block');
          } else {
            content.style.opacity = '0';
            content.classList.add('hidden');
            content.classList.remove('block');
          }
        });
      }
      
      // Run initialization
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeVersionTabs);
      } else {
        initializeVersionTabs();
      }
    </script>
    
    <!-- Navigation -->
    <div class="mt-12 pt-8 border-t border-base-300">
      <a href="/projects" class="btn btn-outline">
        ← Back to Projects
      </a>
    </div>

    <!-- Related Content -->
    {relatedContent.length > 0 && (
      <div class="mt-12 pt-8 border-t border-base-300">
        <h2 class="text-2xl font-bold mb-6">Related Content</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {relatedContent.map(item => (
            <article class="card bg-base-100 shadow hover:shadow-lg transition-shadow duration-200">
              <a 
                href={`/${item.type === 'project' ? 'projects' : 'posts'}/${item.slug}/`}
                class="block"
              >
                <figure>
                  <Image 
                    src={item.data.cover}
                    alt={item.data.title}
                    width={300}
                    height={200}
                    class="w-full h-32 object-cover"
                  />
                </figure>
                <div class="card-body p-4">
                  <div class="flex items-center gap-2 mb-2">
                    <div class={`badge badge-sm ${
                      item.type === 'project' ? 'badge-primary' : 'badge-secondary'
                    }`}>
                      {item.type}
                    </div>
                    <div class="text-xs text-base-content/60">
                      {item.sharedTags.length} shared tag{item.sharedTags.length !== 1 ? 's' : ''}
                    </div>
                  </div>
                  <h3 class="card-title text-base">
                    {item.data.title}
                  </h3>
                </div>
              </a>
              <div class="px-4 pb-4">
                <div class="flex flex-wrap gap-1">
                  {item.sharedTags.map(tag => (
                    <a 
                      href={`/tags/${tag}/`} 
                      class="badge badge-outline badge-xs tag-hover-light-blue transition-colors"
                      onclick="event.stopPropagation()"
                    >
                      {tag}
                    </a>
                  ))}
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    )}
  </article>
</Layout>
